name: Deploy .NET Application

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'SETUP-DOTNET-PROJECTS.md'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: zenwebapi9
  IMAGE_NAME: zenwebapi9
  DEPLOYMENT_TYPE: gke
  GCP_REGION_VALUE: asia-south1
  GKE_CLUSTER: zenhotel-cluster
  GKE_NAMESPACE: default

jobs:
  check-dotnet:
    name: Check for .NET Projects
    runs-on: ubuntu-latest
    outputs:
      has-dotnet: ${{ steps.check.outputs.has-dotnet }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Check for .NET project files
      id: check
      run: |
        if find . -name "*.csproj" -o -name "*.sln" | grep -q .; then
          echo "has-dotnet=true" >> $GITHUB_OUTPUT
          echo "✅ Found .NET project files"
        else
          echo "has-dotnet=false" >> $GITHUB_OUTPUT
          echo "⚠️ No .NET project files found. Add your .NET solution and projects to enable deployment."
        fi

  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: check-dotnet
    if: needs.check-dotnet.outputs.has-dotnet == 'true'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

    - name: Build and Push Docker image
      run: |
        IMAGE_URL="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/docker-repo/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        docker build -t $IMAGE_URL .
        docker push $IMAGE_URL
        echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_ENV

    - name: Deploy to Cloud Run
      if: ${{ env.DEPLOYMENT_TYPE == 'cloudrun' }}
      run: |
        echo "Deploying to Cloud Run..."
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_URL }} \
          --platform managed \
          --region ${{ env.GCP_REGION_VALUE }} \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10
        URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.GCP_REGION_VALUE }} --format 'value(status.url)')
        echo "## 🚀 Cloud Run Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "**Service Name:** ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Service URL:** $URL" >> $GITHUB_STEP_SUMMARY
        echo "**Region:** ${{ env.GCP_REGION_VALUE }}" >> $GITHUB_STEP_SUMMARY

    - name: Install envsubst
      if: ${{ env.DEPLOYMENT_TYPE == 'gke' }}
      run: sudo apt-get update && sudo apt-get install -y gettext-base

    - name: Deploy to GKE
      if: ${{ env.DEPLOYMENT_TYPE == 'gke' }}
      run: |
        echo "Deploying to GKE..."
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.GCP_REGION_VALUE }} --project ${{ env.GCP_PROJECT_ID }}
        kubectl create namespace ${{ env.GKE_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        export IMAGE_URL="${{ env.IMAGE_URL }}"
        export SERVICE_NAME="${{ env.SERVICE_NAME }}"
        envsubst < k8s/deployment.yaml | kubectl apply -f - -n ${{ env.GKE_NAMESPACE }}
        envsubst < k8s/service.yaml | kubectl apply -f - -n ${{ env.GKE_NAMESPACE }}
        kubectl rollout status deployment/zenwebapi9-deployment -n ${{ env.GKE_NAMESPACE }} --timeout=300s
        echo "## 🚀 GKE Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "**Service Name:** ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Cluster:** ${{ env.GKE_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
        echo "**Namespace:** ${{ env.GKE_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
        echo "**Region:** ${{ env.GCP_REGION_VALUE }}" >> $GITHUB_STEP_SUMMARY
